include keys
include processings

rule basetype: { 'int' 'string' 'decimal' 'bool' 'char' 'any' }

rule type:
	basetype
	'tuple' type
	'list' type
	'map' basetype type
	'tuple'
	'list'
	'map' basetype
	identity

rule dataCollection: [data ',']? data

rule listValue: '[' dataCollection? ']'

rule mapKey: data ':' data

rule mapKeycollection: [mapKey ',' ENDLINE? ]? mapKey ENDLINE?

rule mapValue: '{' ENDLINE? mapKeycollection? '}'

rule tupleValue: '(' [data]? ')'

rule collection: { listValue mapValue tupleValue }

rule condition:
	BOOLVALUE
	data 'is' data
	data 'not' IS data
	data 'in' data
	data '<' data
	data '<=' data
	data '>' data
	data '>=' data
	condition 'and' condition
	condition 'or' condition
	condition 'xor' condition
	'not' condition
	'(' condition ')'
	
rule functionCall:
	data '(' dataCollection? ')'
	
rule indexer:
	data '[' data ']'

rule data:
	data operation data
	'+' data
	'-' data
	INTEGERVALUE
	DOUBLEVALUE
	STRINGVALUE
	CHARVALUE
	EXPRESSION
	'null'
	condition
	functionCall
	collection
	indexer
	data '.' identity
	'newline'
	'space'
	'tab'
	'(' data ')'
	identity

rule text: [ data ]

rule if: 'if' condition ':' ENDLINE commandBlock

rule elseif: 'else' 'if' condition ':' ENDLINE commandBlock elseif?

rule else: 'else' ':' ENDLINE commandBlock

rule ifstructure: if [elseif]? else?

rule operation: { '+' '-' '*' '/' '%' '^' }

rule print: 'print' text

rule parse: 'parse' data

rule variable: type identity ('=' data)?

rule loop:
	'for' identity 'in' collection ':' ENDLINE commandBlock
	'for' type identity 'in' collection ':' ENDLINE commandBlock
	'while' condition ':' ENDLINE commandBlock

rule throw: 'throw' identity

rule command:
	functionCall ENDLINE
	identity '=' data ENDLINE
	identity operation '=' data ENDLINE
	'return' data ENDLINE
	print ENDLINE
	parse ENDLINE
	'break' ENDLINE
	'continue' ENDLINE
	variable ENDLINE
	ifstructure
	throw
	loop

rule commandBlock: STARTBLOCK [command] ENDBLOCK

rule processingCommand inherits command:
	'complete'
	'discard'
	'append' text
	'preprend' text
	'replace' text
	processing

rule processingCommandBlock: STARTBLOCK [processingCommand] ENDBLOCK

rule processingType: { 'all' 'line' 'character' }

rule processing: 
	'processing' processingType ':' ENDLINE processingCommandBlock

rule key: 'contextual'? 'identity'? 'key' ID ('=' EXPRESSION)? ENDLINE

rule ruleelement:
	[{ 'identity' identity }] ENDLINE

rule rule:
	'rule' identity ':' ENDLINE STARTBLOCK [ruleelement] ENDBLOCK
	'rule' identity

rule startrule: 'start' 'rule' ':' ENDLINE

rule reference:
	identity '.' reference
	identity

rule using:
	'using' reference ENDLINE

rule include:
	'include' reference ENDLINE

rule import:
	'import' reference ENDLINE

rule element:
	[{key rule startrule variable function using include import error}]

rule doctreevalue: 'open' data

rule paramcollection:
	variable ',' paramcollection
	variable

rule lambda:
	'=>' data
	'=>' command

rule codedefinition:
	ENDLINE commandBlock
	lambda
	ENDLINE STARTBLOCK lambda ENDBLOCK

rule function:
	'function' identity '(' ')' codedefinition
	'function' identity '(' paramcollection ')' codedefinition
	'function' type identity '(' ')' codedefinition
	'function' type identity '(' paramcollection ')' codedefinition
	'function' identity '(' ')' ENDLINE
	'function' identity '(' paramcollection ')' ENDLINE
	'function' type identity '(' ')' ENDLINE
	'function' type identity '(' paramcollection ')' ENDLINE

rule error:
	'error' identity

rule orkestraCode:
	element ENDFILE?